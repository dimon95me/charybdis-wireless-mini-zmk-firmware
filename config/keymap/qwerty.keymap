/* upstream bindings and behaviors */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/pointing.h>

/* local overlays */

#include "macros.dtsi"
#include "behaviors.dtsi"
#include "combos.dtsi"

/ {
    /* --- KEYMAP CONFIG --- */
    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // #define BASE    0
    // #define NUM     1
    // #define NAV     2
    // #define SYM     3
    // #define GAME    4
    // #define EXTRAS  5
    // #define SLOW    6
    // #define SCROLL  7

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESCAPE  &kp Q                             &kp W                               &kp E                                &kp R                              &kp T     &kp Y      &kp U             &kp I             &kp O              &kp P                      &td_layers
&kp TAB     &ht_left LSHFT A                  &ht_left LCTRL S                    &ht_left LALT D                      &ht_left LCMD F                    &kp G     &kp H      &ht_right RCMD J  &ht_right LALT K  &ht_right RCTRL L  &ht_right RSHFT SEMICOLON  &kp DEL
&clip_hist  &ht_universal Z LCMD Z            &ht_universal X LCMD X              &ht_universal C LCMD C               &ht_universal V LCMD V             &kp B     &kp N      &kp M             &mm_cm_sc         &mm_pr_col         &mm_qm_ex                  &kp KP_SLASH
                                                                                  &td_esc_scrl_slow                    &td_clk                            &td_bs    &kp ENTER  &td_space_nav
            >;
        };

        NUM {
            bindings = <
&none  &none           &none             &none         &none             &none            &none         &kp NUMBER_7     &kp NUMBER_8  &kp NUMBER_9  &none  &none
&none  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp BACKSPACE    &kp KP_COMMA  &kp NUMBER_4     &kp NUMBER_5  &kp NUMBER_6  &none  &none
&none  &none           &none             &none         &none             &none            &kp KP_DOT    &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &none  &none
                                         &none         &none             &none            &kp SPACE     &kp KP_NUMBER_0
            >;
        };

        NAV {
            bindings = <
&none  &msc MOVE_LEFT  &msc MOVE_UP      &none         &msc MOVE_DOWN    &msc MOVE_RIGHT    &none  &mkp MB4        &kp UP_ARROW            &mkp MB5       &none  &none
&none  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND  &none              &none  &kp LEFT_ARROW  &kp DOWN                &kp RIGHT      &none  &none
&none  &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_UP  &mmv MOVE_RIGHT   &none              &none  &kp C_AC_UNDO   &kp LA(LG(LEFT_ARROW))  &kp C_AC_REDO  &none  &none
                                         &none         &none             &none              &none  &trans
            >;
        };

        SYM {
            bindings = <
&none  &none  &none     &kp CARET  &kp TILDE      &none        &kp PLUS      &kp AMPS   &kp LBKT  &kp RBKT  &kp PRCNT  &kp BSLH
&none  &none  &kp LPAR  &kp RPAR   &kp BACKSPACE  &kp UNDER    &kp KP_MINUS  &kp GRAVE  &kp LBRC  &kp RBRC  &kp ASTRK  &kp PIPE
&none  &none  &none     &kp HASH   &home_dir      &kp DLLR     &kp EQUAL     &code_blk  &kp LT    &kp GT    &kp AT     &kp KP_SLASH
                        &none      &trans         &trans       &trans        &trans
            >;
        };

        GAME {
            bindings = <
&kp N1  &kp TAB    &kp Q  &kp W  &kp E      &kp R           &none  &none  &none  &none  &none  &trans
&kp N2  &kp LCTRL  &kp A  &kp S  &kp D      &kp F           &none  &none  &none  &none  &none  &none
&kp N3  &kp LSHFT  &kp Y  &kp X  &kp C      &kp V           &none  &none  &none  &none  &none  &none
                          &none  &kp SPACE  &kp LEFT_ALT    &none  &none
            >;
        };

        EXTRAS {
            bindings = <
&studio_unlock   &shrug         &lgtm         &gcm           &none           &kp C_BRIGHTNESS_INC    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2       &bt BT_SEL 3     &out OUT_TOG     &bt BT_CLR
&kp C_SLEEP      &sudo          &none         &none          &none           &kp C_BRIGHTNESS_DEC    &none         &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_STOP       &kp C_NEXT       &none
&kp C_AL_COFFEE  &kp C_AC_UNDO  &kp C_AC_CUT  &kp C_AC_COPY  &kp C_AC_PASTE  &none                   &new_dir      &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PRINTSCREEN  &none
                                              &none          &none           &none                   &none         &none
            >;
        };

        SLOW {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
